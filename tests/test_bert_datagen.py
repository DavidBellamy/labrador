import unittest

import numpy as np
import tensorflow as tf

from lab_transformers.data.bert_datagen import bert_datagen


class TestBertDatagen(unittest.TestCase):
    def setUp(self) -> None:
        # Define test data
        self.data = [
            {"token_bags": [[1, 2, 3], [4, 5, 6]]},
            {"token_bags": [[7, 8, 9], [10, 11, 12]]},
        ]
        self.random_seed = 3141592
        self.mask_token = 805

    def test_bert_datagen(self):
        # Create generator
        generator = bert_datagen(self.data, self.random_seed, self.mask_token)

        # Test the generator
        batch = next(generator)

        # Check that batch is a dict with two keys: input_ids and labels
        self.assertIsInstance(batch, dict)
        self.assertIn("input_ids", batch)
        self.assertIn("labels", batch)

        # Check that input_ids and labels are tensors
        self.assertIsInstance(batch["input_ids"], tf.Tensor)
        self.assertIsInstance(batch["labels"], tf.Tensor)

        # Check that input_ids and labels have the same shape
        self.assertEqual(batch["input_ids"].shape, batch["labels"].shape)

        # Check that input_ids and labels have the same dtype: int32
        self.assertEqual(batch["input_ids"].dtype, tf.int32)
        self.assertEqual(batch["labels"].dtype, tf.int32)

        # Check that input_ids only contains one mask_token
        self.assertEqual(
            tf.reduce_sum(
                tf.cast(tf.equal(batch["input_ids"], self.mask_token), tf.int32)
            ),
            1,
        )

        # Check that input_ids are mask_token where labels are not -100
        self.assertTrue(
            tf.reduce_all(
                tf.where(
                    tf.not_equal(batch["labels"], -100),
                    tf.equal(batch["input_ids"], self.mask_token),
                    True,
                )
            )
        )

        # Check that labels are -100 where input_ids are not mask_token
        self.assertTrue(
            tf.reduce_all(
                tf.where(
                    tf.not_equal(batch["input_ids"], self.mask_token),
                    tf.equal(batch["labels"], -100),
                    True,
                )
            )
        )

    def test_reproducibility(self):
        # Assume: Create two instances with the same parameters. These should generate identical batches of data
        # because they share the same random_seed parameter
        datagen1 = bert_datagen(self.data, self.random_seed, self.mask_token)
        datagen2 = bert_datagen(self.data, self.random_seed, self.mask_token)

        # Action: Generate a batch from each generator
        batch1 = next(datagen1)
        batch2 = next(datagen2)

        # Assert: the batches generated by each instance of the data generator are identical
        self.assertIsNone(
            np.testing.assert_array_equal(batch1["input_ids"], batch2["input_ids"])
        )
        self.assertIsNone(
            np.testing.assert_array_equal(batch1["labels"], batch2["labels"])
        )


if __name__ == "__main__":
    unittest.main()
